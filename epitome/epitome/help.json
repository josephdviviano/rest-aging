{

    "check_EPI2T1" :
        ["Usage:",
         "    check_EPI2T1.py <data_directory> <experiment> <modality>",
         "data_directory -- full path to your MRI/WORKING directory.",
         "experiment -- name of the experiment being analyzed.",
         "modality -- registered image modality to import.",
         "",
         "Prints the central slice of the T1 and co-registered, deskulled",
         "EPI, including an edge-detected version of the T1."
        ],

    "check_T12MNI" :
        ["Usage:",
         "    check_T12MNI.py <data_directory> <experiment> <modality>",
         "data_directory -- full path to your MRI/WORKING directory.",
         "experiment -- name of the experiment being analyzed.",
         "modality -- registered image modality to import.",
         "",
         "Prints the central slice of the MNI T1 and co-registered, deskulled",
         "T1, including an edge-detected version of the MNI T1."
        ],
    
    "check_masks" :
        ["Usage:",
         "    check_masks.py <data_directory> <experiment> <modality>",
         "data_directory -- full path to your MRI/WORKING directory.",
         "experiment -- name of the experiment being analyzed.",
         "modality -- registered image modality to import.",
         "",
         "Prints the central slice of the T1 and co-registered regressor",
         "masks, including an edge-detected version of the T1, to a PDF."
        ],

    "check_motionind" :
        ["Usage:",
         "    check_motionind.py <data_directory> <experiment> <modality>",
         "data_directory -- full path to your MRI/WORKING directory.",
         "experiment -- name of the experiment being analyzed.",
         "modality -- registered image modality to import.",
         "",
         "This plots a trace of the framewise displacement measure and DVARS",
         "measure for each participant (Power et al. 2012). Participants are",
         "sorted in the plot from best to worst behaved, and thresholds are",
         "printed to facilitate qualitative participant rejection, if that's",
         "how you roll."
        ],

    "check_runs" :
        ["Usage:",
         "    check_runs",
         "Generates a .csv containing the 4 dimensions of each raw NIFTI",
         "within an experiment modality, for identifying truncated data."
        ],

    "check_spectra" :
        ["Usage:",
         "    check_spectra.py <data_directory> <experiment> <modality>",
         "data_directory -- full path to your MRI/WORKING directory.",
         "experiment -- name of the experiment being analyzed.",
         "modality -- registered image modality to import.",
         "",
         "This plots the loglog spectra of each tissue regressor per",
         "participant."
        ],

    "combine_volumes" : 
        ["Usage:",
         "    combine_volumes <func1_prefix> <func2_prefix> ",
         "func1_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "func2_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "",
         "Combines two volumes via addition. Therefore, they should not have",
         "overlapping voxels."
        ],

    "concatenate" : 
        ["Usage:",
         "    concatenate <func_prefix>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "",
         "Concatenates all runs in order of a particular type from a ",
         "particular run of the pipeline (i.e., they will only be drawn from",
         "those with the same unique identifier)."
        ],

    "del_everything" :
        ["Usage:",
         "    del_everything",
         "Deletes every processed bit of data for a given experiment."
        ],

    "del_MNI" :
        ["Usage:",
         "    del_MNI",
         "Deletes MNI-space transformed data for a given experiment."
        ],

    "del_postmc" :
        ["Usage:",
         "    del_postmc",
         "Deletes all functional data pre-processing beyond those computed",
         "during 'init_EPI'."
        ],

    "del_reg" :
        ["Usage:",
         "    del_reg",
         "Deletes all registration-related files."
        ],

    "filter" :
        ["Usage:",
         "    filter <func_prefix> <det> <gs> <vent> <dv> <wm_loc> <wm_glo>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "det -- polynomial order to detrend each voxel against.",
         "gs -- if == on, regress mean global signal from each voxel.",
         "vent -- if == on, regress mean ventricle signal from each voxel.",
         "dv -- if == on, regress mean draining vessel signal from each voxel",
         "wm_loc -- if == on, regress local white matter from target voxels.",
         "wm_glo -- if == on, regress mean white matter signal for all voxels."
         "",
         "This computes detrended nuisance time series, fits each run with a",
         "computed noise model, and subtracts the fit. Computes temporal SNR."
        ],

    "fsexport.py" :
        ["Usage:",
         "    fsexport.py <data_directory> <experiment>",
         "data_directory -- full path to your MRI/WORKING directory.",
         "experiment -- name of the experiment being analyzed.",
         "",
         "Imports processed T1s from freesurfer to the experiment directory."
        ],

    "fsrecon.py" :
        ["Usage:",
         "    fsrecon.py <data_directory> <experiment> <modality> <cores>",
         "data_directory -- full path to your MRI/WORKING directory.",
         "experiment -- name of the experiment being analyzed.",
         "modality -- image modality to import (normally T1).",
         "cores -- number of cores to dedicate (one core per run).",
         "",
         "This sends each subject's T1s through the freesurfer pipeline. It ",
         "uses multiple T1s per imaging session, but does not combine them",
         "between sessions. Data is output to the dedicated FREESURFER",
         "directory, and should be exported to the MRI analysis folders using",
         "anatexport.py."
        ],

    "gen_gcor" :
        ["Usage:",
         "    gen_gcor <func_prefix>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "",
         "Calls an AFNI script to calculate the global correlation for each",
         "concatenated set of runs (across all sessions). Useful for resting",
         "state functional connectivity experiments."
        ],

    "gen_regressors" :
        ["Usage:",
         "    gen_regressors <func_prefix>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "",
         "Creates a series of regressors from fMRI data and a freesurfer",
         "segmentation:", 
         "    white matter + eroded mask,",
         "    ventricles + eroded mask,",
         "    grey matter mask,",
         "    brain stem mask,",
         "    dialated whole-brain mask,",
         "    draining vessels mask,",
         "    local white matter regressors + 1 temporal lag,",
         "    ventricle regressors + 1 temporal lag,",
         "    draining vessel regressors + 1 temporal lag."
        ],

    "group_mask" :
        ["Usage:",
         "    group_mask",
         "",
         "Creates a group-level intersection mask in MNI space.",
         "Requires volumes data in standard space to be computed."
        ],

    "ICA" :
        ["Usage:",
         "    ICA <func_prefix> <mask_prefix>",
         "",
         "Runs MELODIC ICA on the input functional data."
        ],

    "init_EPI" : 
        ["Usage:",
         "    init_EPI <data_quality> <del_tr> <t_pattern> <normalization>",
         "             <masking>",
         "data_quality -- 'low' for poor internal contrast, otherwise 'high'",
         "del_tr -- number of TRs to remove from the beginning of the run",
         "t_pattern -- slice-timing at acquisition (from AFNI's 3dTshift)",
         "normalization -- time series normalization.", 
         "                 One of 'off', 'pct', 'scale'.",
         "masking -- EPI brain masking tolerance.", 
         "           One of 'loose', 'normal' 'tight'.",
         "",
         "General pre-processing for all fMRI data:",
         "    Orients data to RAI,",
         "    Deletes initial time points (optionally),",
         "    Removes data outliers,",
         "    Slice time correction,",
         "    Deobliques & motion corrects data,",
         "    Creates session mean deskulled EPIs and whole-brain masks,",
         "    Scales each voxel,",
         "    Calculates various statistics + time series."
        ],

    "lowpass" : 
        ["Usage:",
         "    lowpass <func_prefix> <mask_prefix> <filter_type> <cutoff>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "mask_prefix -- mask data prefix (eg.,EPI_mask in anat_EPI_mask).",
         "filter_type -- low-pass filter type (median, average, kaiser,",
         "               butterworth. See documentation for details.",
         "cutoff -- lowpass filter cuttoff: window length for median/average,",
         "          cutoff in Hz for kaiser/butterworth. Default = 3 / 0.1,",
         "          respectively. See documentation for details.",
         "",
         "This low-passes each voxel time series within the supplied mask to",
         "remove high-frequency information from the data that is hopefully",
         "uninteresting. Options exist to meet various standards that exist."
        ],

    "linreg_calc_AFNI" :
        ["Usage:",
         "linreg_calc_AFNI <cost> <reg_dof> <data_quality>",
         "cost -- cost function minimized during registration:",
         "    'ls'     = Pearson Correlation]",
         "    'mi'     = Mutual Information [H(b)+H(s)-H(b,s)]",
         "    'crM'    = Correlation Ratio (Symmetrized*)",
         "    'nmi'    = Normalized MI [H(b,s)/(H(b)+H(s))]",
         "    'hel'    = Hellinger metric",
         "    'crA'    = Correlation Ratio (Symmetrized+)",
         "    'crU'    = Correlation Ratio (Unsym)",
         "    'sp'     = Spearman [rank] Correlation",
         "    'je'     = Joint Entropy [H(b,s)]",
         "    'lss'    = Signed Pearson Correlation",
         "    'lpc'    = Local Pearson Correlation Signed (Default)",
         "    'lpa'    = Local Pearson Correlation Abs",
         "    'lpc+'   = Local Pearson Signed + Others",
         "    'ncd'    = Normalized Compression Distance",
         "    'lpc+zz' = Local Pearson Correlation Signed + Magic",
         "reg_dof -- registration degrees of freedom:",
         "    'big_move' = Smaller moves (if giant gives bad registration)",
         "    'giant_move' = Large search space allowed (default)",
         "data_quality -- changes registration strategy:",
         "    'high' = Good internal contrast, reg using EPI mean (default)",
         "    'low' = Poor internal contrast, reg using pre-stable TR",
         "",
         "Calculates linear registration between EPI <--> T1 <--> MNI152, and",
         "generates an EPI template registered to T1 & T1 registered to EPI,",
         "(sessionwise)."
        ],

    "linreg_calc_FSL" :
        ["Usage:",
         "linreg_calc_FSL <cost> <reg_dof> <data_quality>",
         "cost -- cost function minimized during registration:",
         "    'ls'     = Pearson Correlation]",
         "    'mi'     = Mutual Information [H(b)+H(s)-H(b,s)]",
         "    'crM'    = Correlation Ratio (Symmetrized*)",
         "    'nmi'    = Normalized MI [H(b,s)/(H(b)+H(s))]",
         "    'hel'    = Hellinger metric",
         "    'crA'    = Correlation Ratio (Symmetrized+)",
         "    'crU'    = Correlation Ratio (Unsym)",
         "    'sp'     = Spearman [rank] Correlation",
         "    'je'     = Joint Entropy [H(b,s)]",
         "    'lss'    = Signed Pearson Correlation",
         "    'lpc'    = Local Pearson Correlation Signed (Default)",
         "    'lpa'    = Local Pearson Correlation Abs",
         "    'lpc+'   = Local Pearson Signed + Others",
         "    'ncd'    = Normalized Compression Distance",
         "    'lpc+zz' = Local Pearson Correlation Signed + Magic",
         "reg_dof -- registration degrees of freedom:",
         "    'big_move' = Smaller moves (if giant gives bad registration)",
         "    'giant_move' = Large search space allowed (default)",
         "data_quality -- changes registration strategy:",
         "    'high' = Good internal contrast, reg using EPI mean (default)",
         "    'low' = Poor internal contrast, reg using pre-stable TR",
         "",
         "Calculates linear registration between EPI <--> T1 <--> MNI152, and",
         "generates an EPI template registered to T1 & T1 registered to EPI,",
         "(sessionwise)."
        ],

    "linreg_EPI2MNI_AFNI" :
        ["Usage:",
         "    linreg_EPI2MNI_AFNI <func_prefix> <voxel_dims>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "voxel_dims -- target voxel dimensions (isotropic).",
         "",
         "Prepares data for analysis in MNI standard space."
        ],

    "linreg_EPI2MNI_FSL" :
        ["Usage:",
         "    linreg_EPI2MNI_FSL <func_prefix> <voxel_dims>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "voxel_dims -- target voxel dimensions (isotropic).",
         "",
         "Prepares data for analysis in MNI standard space."
        ],

    "linreg_FS2EPI_AFNI" :
        ["Usage:",
         "    linreg_FS2EPI_AFNI",
         "Brings Freesurfer atlases in register with single-subject EPIs."
        ],

    "linreg_FS2EPI_FSL" :
        ["Usage:",
         "    linreg_FS2EPI_FSL",
         "Brings Freesurfer atlases in register with single-subject EPIs."
        ],

    "linreg_FS2MNI_FSL" :
        ["Usage:",
         "    linreg_FS2MNI_FSL",
         "Brings Freesurfer atlases in register with MNI standard space."
        ],

    "nonlinreg_calc_AFNI" :
        ["Usage:",
         "    nonlinreg_calc_AFNI",
         "Computes a nonlinear warp from linear-registered individual T1 to",
         "MNI space. Requires these linear registrations to be completed ",
         "first.",
        ],

    "nonlinreg_EPI2MNI_AFNI" :
        ["Usage:",
         "    nonlinreg_EPI2MNI_AFNI <func_prefix> <voxel_dims>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "voxel_dims -- target voxel dimensions (isotropic).",
         "",
         "Prepares data for analysis in MNI standard-space, including a",
         "nonlinear warp.",
        ],

    "surf2vol" : 
        ["Usage:",
         "    surf2vol <func_prefix> <target_prefix>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "target_prefix -- target data prefix (eg.,smooth in func_smooth).",
         "",
         "This projects surface data back into a functional volume with the",
         "same properties as <target_prefix>."
        ],

    "surfsmooth" : 
        ["Usage:",
         "    surfsmooth <func_prefix> <FWHM>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "FWHM -- full-width half-maximum of the gaussian kernel convolved",
         "        with the surface data.",
         "",
         "This spatially-smooths cortical data along the surface mesh",
         "estimated by freesurfer."
        ],

    "TRdrop" : 
        ["Usage:",
        "    TRdrop <func_prefix> <head_size> <FD_thresh> <DV_thresh>",
        "func_prefix -- functional data prefix (e.g., 'func_filtered')",
        "head_size -- head radius in mm (def. 50 mm)",
        "thresh_FD -- censor TRs with delta motion > x mm (def. 0.3 mm)",
        "thresh_DV -- censor TRs with delta GS change > x % (def. 1000000 %)",
        "",
        "This removes motion-corrupted TRs from fMRI scans and outputs",
        "shortened versions for connectivity analysis (mostly). This ",
        "defaults DVARS to OFF by setting a very, very high default."
        ],

    "vol2surf" : 
        ["Usage:",
         "    vol2surf <func_prefix>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "",
         "Projects functional data from volume space to a freesurfer ",
         "generated cortical mesh."
        ],

    "volsmooth" : 
        ["Usage:",
         "    volsmooth <func_prefix> <mask_prefix> <FWHM>",
         "func_prefix -- functional data prefix (eg.,smooth in func_smooth).",
         "mask_prefix -- mask data prefix (eg.,EPI_mask in anat_EPI_mask).",
         "FWHM -- full-width half-maximum of the gaussian kernel convolved",
         "        with the volume data.",
         "",
         "Re-samples a mask containing one or more labels to the functional",
         "data and smooths within unique values. All zero values in the mask",
         "are zeroed out in the output. The output of this can be combined",
         "with the outputs of surfsmooth & surf2vol using combine_volumes."
        ]

}
